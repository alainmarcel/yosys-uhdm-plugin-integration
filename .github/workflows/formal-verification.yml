name: Formal Verification Tests

on:
  workflow_call:

jobs:
  tests-formal-verification:
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy
    strategy:
      matrix:
        include:
          - name: UHDM-integration-tests
            test-suite: UHDM-integration-tests/tests
          - name: sv2v
            test-suite: sv2v/test
          - name: yosys
            test-suite: yosys/tests
      fail-fast: false
    name: ${{ matrix.name }}
    env:
      CC: gcc-9
      CXX: g++-9
      GIT_HTTP_LOW_SPEED_LIMIT: 1
      GIT_HTTP_LOW_SPEED_TIME: 600
      DEBIAN_FRONTEND: noninteractive
      GHA_MACHINE_TYPE: "n2-highmem-4"
      PARSER: yosys-plugin
      TEST_SUITE: ${{ matrix.test-suite }}
      TEST_SUITE_NAME: ${{ matrix.name }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Set up common Ubuntu configuration
        run: ./.github/scripts/set-up-common-ubuntu-configuration.sh

      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y software-properties-common
          add-apt-repository ppa:ubuntu-toolchain-r/test
          apt-get update -qq
          apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools libgoogle-perftools-dev python3 python3-dev uuid uuid-dev tcl-dev flex libfl-dev time python3 jq

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      # See https://github.com/actions/upload-artifact/issues/38
      - name: Extract
        run: tar -xf binaries.tar

      - name: Test
        run: |
          source .github/scripts/common.sh
          ./run_fv_tests.sh "$TEST_SUITE" "$TEST_SUITE_NAME"

      - name: Generate list of performed tests
        run: |
          list_file="build/${TEST_SUITE_NAME}.performed_tests_list.txt"
          touch "$list_file"
          for result_json in build/tests/*/*/result.json; do
            test_name=$(jq -r '.name' "${result_json}")
            printf '%s:%s\n' "${TEST_SUITE_NAME}" "${test_name}" >> "$list_file"
          done

      - name: Pack formal verification logs
        run: |
          cd build
          tar cf ${TEST_SUITE_NAME}.tar tests/*/*/*.out tests/*/*/slpp_all/*.log tests/*/*/*.txt tests/*/*/result.json

      - name: Upload formal verification logs
        uses: actions/upload-artifact@v2
        with:
          name: formal-verification-logs
          path: |
            build/*.tar

      - name: Upload list of performed tests
        uses: actions/upload-artifact@v2
        with:
          name: formal-verification-tests-list
          path: build/*.performed_tests_list.txt

      - name: Upload load graphs
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

      # Do this at the end as this can actually fail
      - name: Check results and print a summary
        run: |
          set -o pipefail
          python3 ./formal/formal_results.py "build/tests/${TEST_SUITE_NAME}" | tee $GITHUB_STEP_SUMMARY

  passlist-check:
    name: Passlist Check
    needs: tests-formal-verification
    if: ${{ !cancelled() }}
    runs-on: [self-hosted, Linux, X64]
    container: ubuntu:jammy-20221130

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Download lists of performed tests
        uses: actions/download-artifact@v2
        with:
          name: formal-verification-tests-list

      - name: Compare lists
        run: |
          sort *.performed_tests_list.txt > performed_tests_list.txt
          grep -o '^[^ #]\+' formal/passlist.txt | sort > sorted_passlist.txt
          readarray not_performed_tests < <(comm -13 performed_tests_list.txt sorted_passlist.txt)
          if (( ${#not_performed_tests[@]} > 0 )); then
            printf '\x1b[1mTests from passlist.txt that were not performed:\x1b[0m\n'
            printf '\x1b[91m%s\x1b[0m\n' "${not_performed_tests[@]}"
            exit 1
          else
            exit 0
          fi
